#!/bin/bash
###############################################################################
#
# Neuroimaging dataset to JSON converter (njprep)
#
# Author:  Qianqian Fang <q.fang at neu.edu>
# License: BSD-3-clause
# Version: 0.5
# Github:  https://github.com/NeuroJSON/neuroj
#
###############################################################################
#
# Functions:
#   njprep is a neuroimaging-data file to JSON converter following the general
#   rationale of the NeuroJSON project - that is to separate a dataset
#   into human-readable/searchable part and a non-searchable/binary data portion.
#
#   The human-readable part are stored in JSON and can be readily uploaded
#   to modern document-store databases to allow us to scale to processing large
#   datasets, making the data searchable, findable and almost universally parsable.
#
#   The non-searchable data are stored in binary JSON, or other formats and
#   can be stored externally while still being associated with the searchable
#   JSON data using links, URLs or stored as "attachments" to the JSON document.
#   They can be "re-united" with the searchable data on-demand to restore the
#   full dataset again.
#   
#   For conversion of human-readable data files, njprep currently supports
#   .json, .tsv, .csv, and various text files (.txt/.md/.rst); for a limit set
#   of neuroimaging data files, such as .nii.gz, .snirf, njprep parse the file
#   header into JSON while storing the rest into binary files. njprep also converts
#   symbolic links to a special JSON element to maintain the linkage.
#
# Dependencies:
#
# For Linux and Mac OS:
#   jq, curl, octave, jbids (https://github.com/NeuroJSON/jbids - including 4
#   submodules under tools), libjson-xs-perl (for JSON::XS)
#
# For Windows: please install cygwin64 (http://cygwin.com/) or MSYS2 (http://msys2.org/)
#   please also install jq, curl, octave, jbids (https://github.com/NeuroJSON/jbids)
#
# Converting some of the data files, such as .snirf or
# .nii/.nii.gz requires octave and the jbids toolbox (including its submodules).
# Other functionalities does not require octave.
#
# Terminology:
#   "database": a collection of datasets, such as OpenNeuro, Dandi, BrainLife etc
#   "dataset" : a group of data files that are acquired for a specific study/purpose, may have multiple subjects folders
#   "subject folder" : a folder storing data obtained from a study subject (human or animal)
#   "data file": a single data file that is part of a dataset
#   "BIDS dataset": a dataset that is organized following the BIDS standard (https://bids.neuroimaging.io/)
#
# How to use:
#    # convert all datasets in a database to JSON
#    njprep /database/root/ /output/json/root/ database_name
#
#    # convert a specific dataset "dataset_name" in a specific database to JSON
#    njprep /database/root/ /output/json/root/ database_name dataset_name
#
#    # convert a single file or subject-folder in a given 
#    njprep /database/root/ /output/json/root/ database_name dataset_name /path/to/a/file
#
###############################################################################

set -u #Treat unset variables as an error when substituting.

if [[ $# -lt 3 ]] ; then
  echo "format: njprep /input/root/folder /output/root/folder database_name <dataset_name>"
  exit
fi

if [[ $3 =~ ^https*:\/\/ ]]; then
  ATTACH_URL=$3
else
  ATTACH_URL="https://neurojson.org/io/stat.cgi?action=get&db=$3&doc="
fi

#===============================================================================
# main function
#===============================================================================

main() {
  if [[ $# -ge 5 ]]; then
    convert_file "$1" "$2" "$4" "$5"
  elif [[ $# -ge 4 ]]; then # convert a single dataset
    convert_dataset "$1" "$2" "$4"
    [[ -d "$2/$4" ]] && bids2json "$2" "$4"
  else
    convert_database "$@"
  fi
}

#===============================================================================
# convert_database(inputroot, outputroot)
#===============================================================================

function convert_database() {
  if [[ -f "$1/dataset_description.json" ]]; then
    convert_dataset "$1" "$2" "$4"
  fi

  echo "converting database ..."

  for ds in ${1%/}/*/
  do
    local dsname=`basename ${ds%/}`
    echo "### processing $dsname"
    convert_dataset "$1" "$2" "$dsname"
  done

  echo bids2json "$2"
  [[ -d "$2" ]] && bids2json "$2"    # merge all subject .jbids file and top-level json files to a single json for a database
}

#===============================================================================
# convert_dataset(datasetroot, outputroot, dsname)
#===============================================================================

function convert_dataset() {
  local dsname=$3

  [[ -f "$2/${dsname%/}.json" ]] && return
  shopt -s globstar

  echo "converting dataset $dsname"

  for ff in ${1%/}/${dsname%/}/**
  do
    convert_file "$1" "$2" "$dsname" "$ff"
  done

  echo mergejson "$2/${dsname}"
  [[ -d "$2/${dsname}" ]] && mergejson "$2/${dsname}"   # merge subject-folder json files to a single .jbids file
}

#===============================================================================
# convert_file(inputroot, outputroot, dsname, filename)
#===============================================================================

function convert_file() {
  local dsname="$3"
  local ff="$4"
  local ds="$1/$dsname"

  echo "converting file $ff"

  fname=`basename "$ff"`

  if [[ -L "$ff" ]]; then     # a symbolic link
     relpath=`realpath --relative-to="$1" $(dirname "$ff")`
     relpath="$relpath/$fname"
  else
     relpath=`realpath --relative-to="$1" "$ff"`
  fi

  outputdir=`dirname "$2/${relpath}"`

  [[ ! -d "$outputdir" ]] && mkdir -p "$outputdir" # create output folder if not exist

  if [[ -d "$ff" ]]; then       # a folder
     return

  elif [[ -L "$ff" ]]; then     # a symbolic link
     link2json "$ff" > "$2/${relpath}.jbids"

  elif [[ -z "$ff" ]]; then     # empty file or all white-space
     echo "[]" > "$2/${relpath}.jbids"

  elif [[ "${ff##*.}" == "tsv" || "${ff##*.}" == "csv" ]]; then    # tsv or csv files
     filesize=$(stat -c %s "$ff")
     if [[ "$filesize" -lt 262144 ]]; then  # tsv smaller than 256k is converted to digest
         tsv2json "$ff" > "$2/${relpath}.jbids"
     else
         relpath2=`realpath --relative-to="$ds" "$ff"`
         pathhash=`echo -n "/${relpath2}" | md5sum | cut -d ' ' -f 1`

         [[ ! -d "$2/.att/$dsname" ]] && mkdir -p "$2/.att/${dsname%/}/"
         tsv2json "$ff" > "$2/.att/${dsname%/}/${pathhash}.tsv.json"
         echo "{\"_DataLink_\" : \"$ATTACH_URL${dsname%/}&file=${pathhash}.tsv.json\"}" > "$2/${relpath}.jbids"
     fi

  elif [[ "${ff##*.}" == "json" ]]; then   # json files
     jq '.' "$ff" > "$2/${relpath}"

  elif [[ "${ff##*.}" == "snirf" ]]; then  # snirf files - use octave+snirfy toolbox
     relpath2=`realpath --relative-to="$ds" "$ff"`
     pathhash=`echo -n "/${relpath2}" | md5sum | cut -d ' ' -f 1`

     [[ ! -d "$2/.att/$dsname" ]] && mkdir -p "$2/.att/$dsname/"
     cmd=$(cat <<EOF
[d1,d2]=snirf2jbids('$ff', 'pathhash', '${pathhash}', 'compression','zlib','attachproto','${ATTACH_URL}${dsname%/}&file=');
savebj('', d2, 'filename', '$2/.att/$dsname/${pathhash}-zlib.jdb','compression','zlib');
savejson('', d1, 'filename', '$2/${relpath}.json');
EOF
)
     octave-cli --eval "$cmd"

  elif [[ "${ff##*.}" =~ "txt" || "${ff##*.}" == "md" || "${ff##*.}" == "rst" || "${fname%.*}" =~ ^(README|CHANGES|CITATION|LICENSE)$ ]]; then # text files
     jq -Rsa . "$ff" > "$2/${relpath}.jbids"

  elif [[ "${ff##*.}" == "png" || "${ff##*.}" == "jpg" || "${ff##*.}" == "pdf" ]]; then # browser readable documents
     [[ ! -d "$2/.att/$dsname" ]] && mkdir -p "$2/.att/$dsname/"
     relpath2=`realpath --relative-to="$ds" "$ff"`
     pathhash=`echo -n "/${relpath2}" | md5sum | cut -d ' ' -f 1`
     cp -a "$ff" "$/.att/$dsname/${pathhash}.${ff##*.}"

  else
     echo "{\"_DataLink_\" : null}" > "$2/${relpath}.jbids"
     echo "skipping ${ff}"
  fi
}

#===============================================================================
# run main function
#===============================================================================

main "$@"; exit
