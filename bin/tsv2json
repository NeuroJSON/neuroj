#!/usr/bin/perl
use strict;
use warnings;

#use JSON::PP;
use JSON::XS;
use Tie::IxHash;
use Scalar::Util qw(looks_like_number);
use MIME::Base64;

my ( @header, @val, $ispretty, $file, %enum, $iscompress, $keymeta );
my %data    = ();
my %rawdata = ();

tie %data, 'Tie::IxHash';

$ispretty = 1;

if ( @ARGV < 1 ) {
    print "format: tsv2json tsvfile.tsv <output.json>\n";
    exit;
}

$iscompress = ( defined $ENV{'NJPREP_ZIP_TSV'} ) ? $ENV{'NJPREP_ZIP_TSV'} : 0;
$keymeta    = 0;

if ( @ARGV > 2 ) {
    $iscompress = $ARGV[2];
}

if ( $ARGV[0] =~ /participants\.[tc]sv$/ ) {
    $keymeta = 1;
}

open( $file, "<", $ARGV[0] ) or die "File '$ARGV[0]' can't be opened";
my $delim = "\t";

$delim = ',' if ( $ARGV[0] =~ /\.csv$/i );

while ( my $line = <$file> ) {
    if ( !@header ) {
        $delim = ( $delim eq "\t" ? ',' : "\t" )
          if ( $line !~ /$delim/ );    # auto-detect if column is \t or , separated
        @header = csvsplit( $line, $delim );
        if ($iscompress) {
            foreach my $hd (@header) {
                $enum{$hd} = ();
                tie %{ $enum{$hd} }, 'Tie::IxHash';
            }
        }
    } else {
        @val = csvsplit( $line, $delim );
        for ( my $i = 0 ; $i <= $#header ; $i++ ) {
            if ( $i <= $#val ) {
                if ( $iscompress && !( $keymeta == 1 && $header[$i] =~ /age|sex|gender/i ) ) {
                    if ( exists $enum{ $header[$i] }->{ $val[$i] } ) {
                        push( @{ $data{ $header[$i] } }, $enum{ $header[$i] }->{ $val[$i] } );
                    } else {
                        my $keylen = keys %{ $enum{ $header[$i] } };
                        $enum{ $header[$i] }->{ $val[$i] } = $keylen + 1;
                        push( @{ $data{ $header[$i] } }, $keylen + 1 );
                    }
                    push( @{ $rawdata{ $header[$i] } }, ( looks_like_number( $val[$i] ) ? $val[$i] + 0 : $val[$i] ) );
                } else {
                    push( @{ $data{ $header[$i] } }, ( looks_like_number( $val[$i] ) ? $val[$i] + 0 : $val[$i] ) );
                }
            }
        }
    }
}

if ($iscompress) {
    my ( $datatype, $zipoutput, $buf, $keylen, $valuelen );
    foreach my $hd ( keys %data ) {
        if ( !( $keymeta == 1 && $hd =~ /age|sex|gender/i ) ) {
            $keylen = keys %{ $enum{$hd} };
            if ( $keylen < 256 ) {
                $buf      = pack( 'C*', @{ $data{$hd} } );
                $datatype = 'uint8';
            } elsif ( $keylen < 65536 ) {
                $buf      = pack( 'S*', @{ $data{$hd} } );
                $datatype = 'uint16';
            } else {
                $buf      = pack( 'L*', @{ $data{$hd} } );
                $datatype = 'uint32';
            }
            eval("use Compress::Zlib; 1")
              or warn "Compress::Zlib is not available: $@";
            my ( $zipper, $status ) = deflateInit();
            $zipoutput = '';
            $zipoutput = $zipper->deflate($buf);
            $zipoutput .= $zipper->flush();
            die "zlib compression failed\n" if ( $zipoutput eq '' );
            $valuelen = scalar( @{ $data{$hd} } );

            if ( $valuelen > 2 * $keylen ) {
                delete $data{$hd};

                %{ $data{$hd} } = ();
                tie %{ $data{$hd} }, 'Tie::IxHash';
                @{ $data{$hd}->{'_EnumKey_'} } = ( keys %{ $enum{$hd} } );

                %{ $data{$hd}->{'_EnumValue_'} } = ();
                tie %{ $data{$hd}->{'_EnumValue_'} }, 'Tie::IxHash';
                $data{$hd}->{'_EnumValue_'}->{'_ArraySize_'}    = $valuelen;
                $data{$hd}->{'_EnumValue_'}->{'_ArrayType_'}    = $datatype;
                $data{$hd}->{'_EnumValue_'}->{'_ArrayZipType_'} = 'zlib';
                $data{$hd}->{'_EnumValue_'}->{'_ArrayZipSize_'} = $valuelen;
                $data{$hd}->{'_EnumValue_'}->{'_ArrayZipData_'} =
                  encode_base64($zipoutput);
            } else {
                @{ $data{$hd} } = @{ $rawdata{$hd} };
            }
        }
    }
}

if (@header) {
    my $json = JSON::XS->new;
    $json = $json->pretty($ispretty);
    if ( @ARGV < 2 ) {
        print $json->encode( \%data );
    } else {
        open( $file, ">", $ARGV[1] ) or die "File '$ARGV[1]' can't be opened";
        print $file $json->encode( \%data );
        close($file);
    }
}

sub csvsplit {
    my $line = shift;
    my $sep  = ( shift or ',' );

    return () unless $line;

    my @cells;
    $line =~ s/\r?\n$//;

    my $re = qr/(?:^|$sep)(?:"([^"]*)"|([^$sep]*))/;
    while ( $line =~ /$re/g ) {
        my $value = defined $1 ? $1 : $2;
        push @cells,
          (
            defined $value
            ? ( looks_like_number($value) ? $value + 0 : trim($value) )
            : ''
          );
    }
    return @cells;
}

sub trim {
    ( my $s = $_[0] ) =~ s/^\s+|\s+$//g;
    return $s;
}
